{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","React","useState","shift","setShift","maxShift","length","className","style","width","transition","transform","map","item","i","src","alt","height","type","cn","onClick","shiftLeft","App","state","this","StrictMode","name","defaultValue","min","max","onChange","event","setState","target","value","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b210571.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n};\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n}) => {\n  const [shift, setShift] = React.useState(0);\n\n  const maxShift = -(images.length - frameSize);\n\n  if (shift < maxShift) {\n    setShift(maxShift);\n  }\n\n  const slideRight = () => {\n    const shiftLeft = shift - step;\n\n    return shift > maxShift\n      && setShift(shiftLeft < maxShift ? maxShift : shiftLeft);\n  };\n\n  const slideLeft = () => shift < 0\n    && setShift((shift + step) < 0 ? shift + step : 0);\n\n  const transform = () => (shift < maxShift ? maxShift : shift) * itemWidth;\n\n  return (\n    <>\n      <div\n        className=\"Carousel\"\n        style={{\n          width: `${frameSize * itemWidth}px`,\n          transition: `width ${animationDuration}ms`,\n        }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            width: `${images.length * itemWidth}px`,\n            transform: `translateX(${transform()}px)`,\n            transition: `transform ${animationDuration}ms, width ${animationDuration}ms`,\n          }}\n        >\n          {images.map((item, i) => (\n            <li key={item}>\n              <img\n                src={item}\n                className=\"Carousel__image\"\n                alt={`${i}`}\n                style={{\n                  width: `${itemWidth}px`,\n                  height: `${itemWidth}px`,\n                  transition: `width ${animationDuration}ms, height ${animationDuration}ms`,\n                }}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"Carousel__buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'Carousel__button',\n            {\n              'Carousel__button--disabled':\n                shift >= 0 || frameSize === images.length,\n            },\n          )}\n          onClick={slideLeft}\n        >\n          &#8678;\n        </button>\n        <button\n          type=\"button\"\n          className={cn(\n            'Carousel__button',\n            {\n              'Carousel__button--disabled':\n                shift <= maxShift || frameSize === images.length,\n            },\n          )}\n          data-cy=\"next\"\n          onClick={slideRight}\n        >\n          &#8680;\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n    } = this.state;\n\n    return (\n      <React.StrictMode>\n        <div className=\"App\">\n          <div>\n            <h1 className=\"App__title\" data-cy=\"title\">\n              {`Carousel with ${images.length} images`}\n            </h1>\n\n            <Carousel\n              images={images}\n              step={step}\n              frameSize={frameSize}\n              itemWidth={itemWidth}\n              animationDuration={animationDuration}\n            />\n\n            <div className=\"App__inputs\">\n              <label className=\"App__input-label\">\n                <input\n                  type=\"number\"\n                  className=\"App__input\"\n                  name=\"step\"\n                  defaultValue={step}\n                  min={1}\n                  max={10}\n                  step={1}\n                  onChange={\n                    (event) => this.setState({ step: +event.target.value })\n                  }\n                />\n                Step\n              </label>\n\n              <label className=\"App__input-label\">\n                <input\n                  type=\"number\"\n                  className=\"App__input\"\n                  name=\"frameSize\"\n                  defaultValue={frameSize}\n                  min={1}\n                  max={10}\n                  step={1}\n                  onChange={\n                    (event) => this.setState({ frameSize: +event.target.value })\n                  }\n                />\n                Count of Smiley\n              </label>\n\n              <label className=\"App__input-label\">\n                <input\n                  type=\"number\"\n                  className=\"App__input\"\n                  name=\"itemWidth\"\n                  defaultValue={itemWidth}\n                  min={70}\n                  max={150}\n                  step={20}\n                  onChange={\n                    (event) => this.setState({ itemWidth: +event.target.value })\n                  }\n                />\n                Smiley Width\n              </label>\n\n              <label className=\"App__input-label\">\n                <input\n                  type=\"number\"\n                  className=\"App__input\"\n                  name=\"animationDuration\"\n                  defaultValue={animationDuration}\n                  min={200}\n                  max={2000}\n                  step={200}\n                  onChange={\n                    (event) => this.setState(\n                      { animationDuration: +event.target.value },\n                    )\n                  }\n                />\n                Animation Duration\n              </label>\n            </div>\n          </div>\n        </div>\n      </React.StrictMode>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}